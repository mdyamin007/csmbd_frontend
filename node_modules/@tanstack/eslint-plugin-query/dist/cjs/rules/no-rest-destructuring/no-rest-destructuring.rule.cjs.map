{"version":3,"file":"no-rest-destructuring.rule.cjs","sources":["../../../../src/rules/no-rest-destructuring/no-rest-destructuring.rule.ts"],"sourcesContent":["import { AST_NODE_TYPES, ESLintUtils } from '@typescript-eslint/utils'\nimport { getDocsUrl } from '../../utils/get-docs-url'\nimport { ASTUtils } from '../../utils/ast-utils'\nimport { detectTanstackQueryImports } from '../../utils/detect-react-query-imports'\nimport { NoRestDestructuringUtils } from './no-rest-destructuring.utils'\nimport type { ExtraRuleDocs } from '../../types'\n\nexport const name = 'no-rest-destructuring'\n\nconst queryHooks = [\n  'useQuery',\n  'useQueries',\n  'useInfiniteQuery',\n  'useSuspenseQuery',\n  'useSuspenseQueries',\n  'useSuspenseInfiniteQuery',\n]\n\nconst createRule = ESLintUtils.RuleCreator<ExtraRuleDocs>(getDocsUrl)\n\nexport const rule = createRule({\n  name,\n  meta: {\n    type: 'problem',\n    docs: {\n      description: 'Disallows rest destructuring in queries',\n      recommended: 'warn',\n    },\n    messages: {\n      objectRestDestructure: `Object rest destructuring on a query will observe all changes to the query, leading to excessive re-renders.`,\n    },\n    schema: [],\n  },\n  defaultOptions: [],\n\n  create: detectTanstackQueryImports((context, _, helpers) => {\n    const queryResultVariables = new Set<string>()\n\n    return {\n      CallExpression: (node) => {\n        if (\n          !ASTUtils.isIdentifierWithOneOfNames(node.callee, queryHooks) ||\n          node.parent.type !== AST_NODE_TYPES.VariableDeclarator ||\n          !helpers.isTanstackQueryImport(node.callee)\n        ) {\n          return\n        }\n\n        const returnValue = node.parent.id\n\n        if (\n          node.callee.name !== 'useQueries' &&\n          node.callee.name !== 'useSuspenseQueries'\n        ) {\n          if (NoRestDestructuringUtils.isObjectRestDestructuring(returnValue)) {\n            return context.report({\n              node: node.parent,\n              messageId: 'objectRestDestructure',\n            })\n          }\n\n          if (returnValue.type === AST_NODE_TYPES.Identifier) {\n            queryResultVariables.add(returnValue.name)\n          }\n\n          return\n        }\n\n        if (returnValue.type !== AST_NODE_TYPES.ArrayPattern) {\n          if (returnValue.type === AST_NODE_TYPES.Identifier) {\n            queryResultVariables.add(returnValue.name)\n          }\n          return\n        }\n\n        returnValue.elements.forEach((queryResult) => {\n          if (queryResult === null) {\n            return\n          }\n          if (NoRestDestructuringUtils.isObjectRestDestructuring(queryResult)) {\n            context.report({\n              node: queryResult,\n              messageId: 'objectRestDestructure',\n            })\n          }\n        })\n      },\n\n      VariableDeclarator: (node) => {\n        if (\n          node.init?.type === AST_NODE_TYPES.Identifier &&\n          queryResultVariables.has(node.init.name) &&\n          NoRestDestructuringUtils.isObjectRestDestructuring(node.id)\n        ) {\n          context.report({\n            node,\n            messageId: 'objectRestDestructure',\n          })\n        }\n      },\n\n      SpreadElement: (node) => {\n        if (\n          node.argument.type === AST_NODE_TYPES.Identifier &&\n          queryResultVariables.has(node.argument.name)\n        ) {\n          context.report({\n            node,\n            messageId: 'objectRestDestructure',\n          })\n        }\n      },\n    }\n  }),\n})\n"],"names":["ESLintUtils","getDocsUrl","detectTanstackQueryImports","ASTUtils","AST_NODE_TYPES","NoRestDestructuringUtils"],"mappings":";;;;;;;AAOO,MAAM,OAAO;AAEpB,MAAM,aAAa;AAAA,EACjB;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AACF;AAEA,MAAM,aAAaA,MAAAA,YAAY,YAA2BC,qBAAU;AAE7D,MAAM,OAAO,WAAW;AAAA,EAC7B;AAAA,EACA,MAAM;AAAA,IACJ,MAAM;AAAA,IACN,MAAM;AAAA,MACJ,aAAa;AAAA,MACb,aAAa;AAAA,IACf;AAAA,IACA,UAAU;AAAA,MACR,uBAAuB;AAAA,IACzB;AAAA,IACA,QAAQ,CAAA;AAAA,EACV;AAAA,EACA,gBAAgB,CAAC;AAAA,EAEjB,QAAQC,wBAAAA,2BAA2B,CAAC,SAAS,GAAG,YAAY;AACpD,UAAA,2CAA2B,IAAY;AAEtC,WAAA;AAAA,MACL,gBAAgB,CAAC,SAAS;AACxB,YACE,CAACC,SAAS,SAAA,2BAA2B,KAAK,QAAQ,UAAU,KAC5D,KAAK,OAAO,SAASC,MAAAA,eAAe,sBACpC,CAAC,QAAQ,sBAAsB,KAAK,MAAM,GAC1C;AACA;AAAA,QAAA;AAGI,cAAA,cAAc,KAAK,OAAO;AAEhC,YACE,KAAK,OAAO,SAAS,gBACrB,KAAK,OAAO,SAAS,sBACrB;AACI,cAAAC,0BAAA,yBAAyB,0BAA0B,WAAW,GAAG;AACnE,mBAAO,QAAQ,OAAO;AAAA,cACpB,MAAM,KAAK;AAAA,cACX,WAAW;AAAA,YAAA,CACZ;AAAA,UAAA;AAGC,cAAA,YAAY,SAASD,MAAA,eAAe,YAAY;AAC7B,iCAAA,IAAI,YAAY,IAAI;AAAA,UAAA;AAG3C;AAAA,QAAA;AAGE,YAAA,YAAY,SAASA,MAAA,eAAe,cAAc;AAChD,cAAA,YAAY,SAASA,MAAA,eAAe,YAAY;AAC7B,iCAAA,IAAI,YAAY,IAAI;AAAA,UAAA;AAE3C;AAAA,QAAA;AAGU,oBAAA,SAAS,QAAQ,CAAC,gBAAgB;AAC5C,cAAI,gBAAgB,MAAM;AACxB;AAAA,UAAA;AAEE,cAAAC,0BAAA,yBAAyB,0BAA0B,WAAW,GAAG;AACnE,oBAAQ,OAAO;AAAA,cACb,MAAM;AAAA,cACN,WAAW;AAAA,YAAA,CACZ;AAAA,UAAA;AAAA,QACH,CACD;AAAA,MACH;AAAA,MAEA,oBAAoB,CAAC,SAAS;;AAC5B,cACE,UAAK,SAAL,mBAAW,UAASD,MAAAA,eAAe,cACnC,qBAAqB,IAAI,KAAK,KAAK,IAAI,KACvCC,0BAAAA,yBAAyB,0BAA0B,KAAK,EAAE,GAC1D;AACA,kBAAQ,OAAO;AAAA,YACb;AAAA,YACA,WAAW;AAAA,UAAA,CACZ;AAAA,QAAA;AAAA,MAEL;AAAA,MAEA,eAAe,CAAC,SAAS;AAErB,YAAA,KAAK,SAAS,SAASD,qBAAe,cACtC,qBAAqB,IAAI,KAAK,SAAS,IAAI,GAC3C;AACA,kBAAQ,OAAO;AAAA,YACb;AAAA,YACA,WAAW;AAAA,UAAA,CACZ;AAAA,QAAA;AAAA,MACH;AAAA,IAEJ;AAAA,EACD,CAAA;AACH,CAAC;;;"}